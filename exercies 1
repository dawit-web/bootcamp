
exercies 1 


select *
from items
order by Price asc ;


SELECT *
FROM items 
WHERE price >= 80 
order by Price desc ; 

SELECT first_name 
FROM customers
order by first_name
FETCH FIRST 3 ROW ONLY;

//4
SELECT last_name
FROM customers
order by last_name desc
OFFSET 2 ROWS
FETCH first 5 ROW ONLY;

//2
-- CREATE TABLE purchases( 
-- customers_id SERIAL PRIMARY KEY , 
-- items_id VARCHAR (50) NOT NULL  );	


//daily challenge 
CREATE TABLE FirstTab (
     id integer, 
     name VARCHAR(10)
);

INSERT INTO FirstTab (id ,name)
VALUES (5,'Pawan'),(6,'Sharlee'),(7,'Krish'),(NULL,'Avtaar');

SELECT * 
FROM FirstTab

CREATE TABLE SecondTab (
    id integer 
);
INSERT INTO SecondTab VALUES
(5),
(NULL);

SELECT * FROM SecondTab





exercies 1 


select *
from items
order by Price asc ;


SELECT *
FROM items 
WHERE price >= 80 
order by Price desc ; 

SELECT first_name 
FROM customers
order by first_name
FETCH FIRST 3 ROW ONLY;

//4
SELECT last_name
FROM customers
order by last_name desc
OFFSET 2 ROWS
FETCH first 5 ROW ONLY;

//2
-- CREATE TABLE purchases( 
-- customers_id SERIAL PRIMARY KEY , 
-- items_id VARCHAR (50) NOT NULL  );	


//daily challenge 
CREATE TABLE FirstTab (
     id integer, 
     name VARCHAR(10)
);

INSERT INTO FirstTab (id ,name)
VALUES (5,'Pawan'),(6,'Sharlee'),(7,'Krish'),(NULL,'Avtaar');

SELECT * 
FROM FirstTab

CREATE TABLE SecondTab (
    id integer 
);
INSERT INTO SecondTab VALUES
(5),
(NULL);

SELECT * FROM SecondTab


day 3///


SELECT language_id
FROM film

--2
select film.title , film.description , language.name
from language
inner join film
	on film.language_id = language.language_id
--3
CREATE TABLE new_film(
    film_id SERIAL PRIMARY KEY,
    name VARCHAR (100) NOT NULL
    );

 INSERT INTO new_film (id, name )
VALUES (1,'avodim'),(2,'jango'),(3,'gogo');

4
CREATE TABLE customer_review 
(
	review_id SERIAL NOT NULL,
	film_id INT NOT NULL,
    language_id INT,
    title VARCHAR(255),
    score INT,
    review_text text,
    last_update TIMESTAMP,
    PRIMARY KEY (review_id),
    CONSTRAINT fk_film_id
    FOREIGN KEY (film_id)
        REFERENCES new_film (film_id)
        ON DELETE CASCADE,
    FOREIGN KEY (language_id)
        REFERENCES language (language_id)
);
--5
